set shell := ["bash", "-Eeuo", "pipefail", "-c"]

quadlet_source_dir := "/usr/share/hoth-os/apps/arr-stack/quadlets"
quadlet_user_dir := config_directory() + "/containers/systemd"

install:
    #!/usr/bin/env bash
    set -Eeuo pipefail

    gum style --border rounded --padding "1 2" --border-foreground 212 "Arr Stack Setup Wizard"
    echo

    DATA_PATH=$(gum input --placeholder "/srv" --prompt "Base path: " --value "/srv")
    echo "Base path: $DATA_PATH"

    SONARR_PORT=$(gum input --placeholder "8989" --prompt "Sonarr port: " --value "8989")
    echo "Sonarr port: $SONARR_PORT"

    RADARR_PORT=$(gum input --placeholder "7878" --prompt "Radarr port: " --value "7878")
    echo "Radarr port: $RADARR_PORT"

    PROWLARR_PORT=$(gum input --placeholder "9696" --prompt "Prowlarr port: " --value "9696")
    echo "Prowlarr port: $PROWLARR_PORT"

    QBIT_PORT=$(gum input --placeholder "8080" --prompt "qBittorrent port: " --value "8080")
    echo "qBittorrent port: $QBIT_PORT"

    TORRENT_PORT=$(gum input --placeholder "6881" --prompt "Torrent port: " --value "6881")
    echo "Torrent port: $TORRENT_PORT"
    echo

    gum confirm "Install Arr Stack with these settings?" || exit 0
    echo

    echo "Creating directories..."
    sudo mkdir -p "$DATA_PATH/config"/{sonarr,radarr,prowlarr,qbittorrent}
    sudo mkdir -p "$DATA_PATH/data"/{downloads,tv,movies}
    sudo chown -R $(id -u):$(id -g) "$DATA_PATH/config" "$DATA_PATH/data"
    mkdir -p "{{ quadlet_user_dir }}"

    echo "Installing pod quadlet..."
    sed \
        -e "s|PublishPort=8989:8989|PublishPort=$SONARR_PORT:8989|" \
        -e "s|PublishPort=7878:7878|PublishPort=$RADARR_PORT:7878|" \
        -e "s|PublishPort=9696:9696|PublishPort=$PROWLARR_PORT:9696|" \
        -e "s|PublishPort=8080:8080|PublishPort=$QBIT_PORT:$QBIT_PORT|" \
        -e "s|PublishPort=6881:6881|PublishPort=$TORRENT_PORT:6881|g" \
        {{ quadlet_source_dir }}/arr-stack.pod \
        > "{{ quadlet_user_dir }}/arr-stack.pod"

    echo "Installing Sonarr quadlet..."
    sed \
        -e "s|Volume=/srv/config|Volume=$DATA_PATH/config|g" \
        -e "s|Volume=/srv/data|Volume=$DATA_PATH/data|g" \
        {{ quadlet_source_dir }}/sonarr.container \
        > "{{ quadlet_user_dir }}/sonarr.container"

    echo "Installing Radarr quadlet..."
    sed \
        -e "s|Volume=/srv/config|Volume=$DATA_PATH/config|g" \
        -e "s|Volume=/srv/data|Volume=$DATA_PATH/data|g" \
        {{ quadlet_source_dir }}/radarr.container \
        > "{{ quadlet_user_dir }}/radarr.container"

    echo "Installing Prowlarr quadlet..."
    sed \
        -e "s|Volume=/srv/config|Volume=$DATA_PATH/config|g" \
        -e "s|Volume=/srv/data|Volume=$DATA_PATH/data|g" \
        {{ quadlet_source_dir }}/prowlarr.container \
        > "{{ quadlet_user_dir }}/prowlarr.container"

    echo "Installing FlareSolverr quadlet..."
    sed \
        -e "s|Volume=/srv/config|Volume=$DATA_PATH/config|g" \
        -e "s|Volume=/srv/data|Volume=$DATA_PATH/data|g" \
        {{ quadlet_source_dir }}/flaresolverr.container \
        > "{{ quadlet_user_dir }}/flaresolverr.container"

    echo "Installing qBittorrent quadlet..."
    sed \
        -e "s|Volume=/srv/config|Volume=$DATA_PATH/config|g" \
        -e "s|Volume=/srv/data|Volume=$DATA_PATH/data|g" \
        -e "s|WEBUI_PORT=8080|WEBUI_PORT=$QBIT_PORT|g" \
        {{ quadlet_source_dir }}/qbittorrent.container \
        > "{{ quadlet_user_dir }}/qbittorrent.container"

    loginctl enable-linger $(whoami)

    echo "Starting services..."
    systemctl --user daemon-reload
    systemctl --user start arr-stack-pod.service
    echo

    gum style --foreground 212 "✓ Arr Stack installed successfully!"
    gum style --faint "Sonarr: http://localhost:$SONARR_PORT"
    gum style --faint "Radarr: http://localhost:$RADARR_PORT"
    gum style --faint "Prowlarr: http://localhost:$PROWLARR_PORT"
    gum style --faint "qBittorrent: http://localhost:$QBIT_PORT"
    gum style --faint "Data: $DATA_PATH"
    echo

    gum style --foreground 212 "⏱️ Waiting until services are ready..."
    while ! curl -s "http://localhost:$SONARR_PORT" >/dev/null; do sleep 2; done
    while ! curl -s "http://localhost:$RADARR_PORT" >/dev/null; do sleep 2; done
    while ! curl -s "http://localhost:$PROWLARR_PORT" >/dev/null; do sleep 2; done
    while ! curl -s "http://localhost:$QBIT_PORT" >/dev/null; do sleep 2; done
    gum style --foreground 212 "✓ All services are up!"

    just _setup "$SONARR_PORT" "$RADARR_PORT" "$PROWLARR_PORT" "$QBIT_PORT" "$DATA_PATH"

    if gum confirm "Add to Homepage?"; then
        just configure-homepage "$SONARR_PORT" "$RADARR_PORT" "$PROWLARR_PORT" "$QBIT_PORT" "$DATA_PATH"
    fi

_setup sonarr_port radarr_port prowlarr_port qbit_port base_dir="/srv":
    #!/usr/bin/env bash
    set -Eeuo pipefail

    gum style --foreground 212 "Configuring services..."

    BASE_DIR="{{ base_dir }}"
    SONARR_CONFIG="$BASE_DIR/config/sonarr/config.xml"
    RADARR_CONFIG="$BASE_DIR/config/radarr/config.xml"
    PROWLARR_CONFIG="$BASE_DIR/config/prowlarr/config.xml"
    QBIT_CONFIG="$BASE_DIR/config/qbittorrent/qBittorrent/qBittorrent.conf"
    SONARR_URL="http://localhost:{{ sonarr_port }}"
    RADARR_URL="http://localhost:{{ radarr_port }}"
    PROWLARR_URL="http://localhost:{{ prowlarr_port }}"
    QBIT_URL="http://localhost:{{ qbit_port }}"

    if [ ! -f "$SONARR_CONFIG" ]; then
        gum style --foreground 196 "Error: Sonarr config not found at $SONARR_CONFIG"
        exit 1
    fi

    if [ ! -f "$RADARR_CONFIG" ]; then
        gum style --foreground 196 "Error: Radarr config not found at $RADARR_CONFIG"
        exit 1
    fi

    if [ ! -f "$PROWLARR_CONFIG" ]; then
        gum style --foreground 196 "Error: Prowlarr config not found at $PROWLARR_CONFIG"
        exit 1
    fi

    if [ ! -f "$QBIT_CONFIG" ]; then
        gum style --foreground 196 "Error: qBittorrent config not found at $QBIT_CONFIG"
        exit 1
    fi

    # Ask for qbit username and password
    EXISTING_QBIT_USER=$(yq -p ini -o yaml '.Preferences.WebUI\Username' "$QBIT_CONFIG")

    if [ -n "$EXISTING_QBIT_USER" ] && [ "$EXISTING_QBIT_USER" != "null" ]; then
        DEFAULT_QBIT_USER="$EXISTING_QBIT_USER"
    else
        DEFAULT_QBIT_USER="admin"
    fi

    QBIT_USER=$(gum input --placeholder "admin" --prompt "qBittorrent username: " --value "$DEFAULT_QBIT_USER")

    EXISTING_QBIT_PASS_HASH=$(yq -p ini -o yaml '.Preferences.WebUI\Password_PBKDF2' "$QBIT_CONFIG")
    if [ -n "$EXISTING_QBIT_PASS_HASH" ] && [ "$EXISTING_QBIT_PASS_HASH" != "null" ]; then
        DEFAULT_QBIT_PASS="(unchanged)"
    else
        DEFAULT_QBIT_PASS=""
    fi

    QBIT_PASS=$(gum input --password --placeholder "Password" --prompt "qBittorrent password: " --value "$DEFAULT_QBIT_PASS")

    gum style --foreground 212 "Updating qBittorrent credentials..."
    gum style --foreground 212 " shutting down qBittorrent..."

    systemctl --user stop qbittorrent

    # Update qBittorrent config with new username and password

    sudo yq ".Preferences.WebUI\\Username = \"$QBIT_USER\"" -i -p ini $QBIT_CONFIG -o ini
    if [ "$QBIT_PASS" == "(unchanged)" ]; then
        gum style --foreground 212 "✓ qBittorrent password unchanged"
        hashed_pass=$(/usr/share/hoth-os/apps/arr-stack/qbit_pass.py generate "$QBIT_PASS")
        sudo yq ".Preferences.WebUI\\Password_PBKDF2=\"@ByteArray($hashed_pass)\"" -i -p ini $QBIT_CONFIG -o ini
    fi

    # Set download paths
    sudo yq ".BitTorrent.Session\\DefaultSavePath = \"/data/downloads\"" -i -p ini $QBIT_CONFIG -o ini
    sudo yq ".BitTorrent.Session\\TempPath = \"/data/downloads/incomplete\"" -i -p ini $QBIT_CONFIG -o ini
    gum style --foreground 212 " starting qBittorrent..."
    systemctl --user start qbittorrent
    gum style --foreground 212 "✓ qBittorrent credentials updated"

    gum style --foreground 212 "Configuring Prowlarr..."

    PROWLARR_API_KEY=$(yq -p xml -o yaml '.Config.ApiKey' "$PROWLARR_CONFIG")
    if [ -z "$PROWLARR_API_KEY" ] || [ "$PROWLARR_API_KEY" == "null" ]; then
        gum style --foreground 196 "Error: Could not read Prowlarr API key from $PROWLARR_CONFIG"
        exit 1
    fi

    SONARR_API_KEY=$(yq -p xml -o yaml '.Config.ApiKey' "$SONARR_CONFIG")
    if [ -z "$SONARR_API_KEY" ] || [ "$SONARR_API_KEY" == "null" ]; then
        gum style --foreground 196 "Error: Could not read Sonarr API key from $SONARR_CONFIG"
        exit 1
    fi

    RADARR_API_KEY=$(yq -p xml -o yaml '.Config.ApiKey' "$RADARR_CONFIG")
    if [ -z "$RADARR_API_KEY" ] || [ "$RADARR_API_KEY" == "null" ]; then
        gum style --foreground 196 "Error: Could not read Radarr API key from $RADARR_CONFIG"
        exit 1
    fi

    gum style --foreground 212 "Adding FlareSolverr to Prowlarr..."
    python3 /usr/share/hoth-os/apps/arr-stack/add_flaresolverr_to_prowlarr.py \
        --prowlarr-url "$PROWLARR_URL" \
        --prowlarr-apikey "$PROWLARR_API_KEY" \
        --flaresolverr-url "http://localhost:8191" \
        && gum style --foreground 212 "✓ FlareSolverr added to Prowlarr" \
        || gum style --foreground 196 "Error: Failed to add FlareSolverr to Prowlarr"

    gum style --foreground 212 "Adding Sonarr and Radarr to Prowlarr..."

    python3 /usr/share/hoth-os/apps/arr-stack/add_to_prowlarr.py \
        --prowlarr-url "$PROWLARR_URL" \
        --prowlarr-apikey "$PROWLARR_API_KEY" \
        --arr-type "sonarr" \
        --arr-url "$SONARR_URL" \
        --arr-apikey "$SONARR_API_KEY" \
        --name "Hoth Sonarr" \
        && gum style --foreground 212 "✓ Sonarr added to Prowlarr" \
        || gum style --foreground 196 "Error: Failed to add Sonarr to Prowlarr"

    python3 /usr/share/hoth-os/apps/arr-stack/add_to_prowlarr.py \
        --prowlarr-url "$PROWLARR_URL" \
        --prowlarr-apikey "$PROWLARR_API_KEY" \
        --arr-type "radarr" \
        --arr-url "$RADARR_URL" \
        --arr-apikey "$RADARR_API_KEY" \
        --name "Hoth Radarr" \
        && gum style --foreground 212 "✓ Radarr added to Prowlarr" \
        || gum style --foreground 196 "Error: Failed to add Radarr to Prowlarr"

    gum style --foreground 212 "Setting up root folders..."

    python3 /usr/share/hoth-os/apps/arr-stack/setup_root_folders.py \
        --sonarr-url "$SONARR_URL" \
        --sonarr-apikey "$SONARR_API_KEY" \
        --radarr-url "$RADARR_URL" \
        --radarr-apikey "$RADARR_API_KEY" \
        && gum style --foreground 212 "✓ Root folders configured successfully!" \
        || gum style --foreground 196 "Error: Failed to configure root folders"

    gum style --foreground 212 "Adding qBittorrent as download client to Sonarr and Radarr..."

    python3 /usr/share/hoth-os/apps/arr-stack/add_qbittorrent_client.py \
        --sonarr-url "$SONARR_URL" \
        --sonarr-apikey "$SONARR_API_KEY" \
        --radarr-url "$RADARR_URL" \
        --radarr-apikey "$RADARR_API_KEY" \
        --qbittorrent-url "$QBIT_URL" \
        --qbittorrent-username "$QBIT_USER" \
        --qbittorrent-password "$QBIT_PASS" \
        --qbittorrent-port "{{ qbit_port }}" \
        && gum style --foreground 212 "✓ qBittorrent added as download client!" \
        || gum style --foreground 196 "Error: Failed to add qBittorrent as download client"

uninstall:
    #!/usr/bin/env bash
    set -Eeuo pipefail

    gum confirm --default=false "Uninstall Arr Stack? (data will be preserved)" || exit 0

    gum spin --spinner dot --title "Stopping services..." -- systemctl --user disable --now arr-stack-pod.service 2>/dev/null || true
    rm -f "$HOME/.config/containers/systemd/arr-stack.pod"
    rm -f "$HOME/.config/containers/systemd/sonarr.container"
    rm -f "$HOME/.config/containers/systemd/radarr.container"
    rm -f "$HOME/.config/containers/systemd/prowlarr.container"
    rm -f "$HOME/.config/containers/systemd/qbittorrent.container"
    systemctl --user daemon-reload

    gum style --foreground 212 "✓ Arr Stack uninstalled"

status:
    @systemctl --user status arr-stack-pod.service

logs service="" follow="":
    #!/usr/bin/env bash
    set -Eeuo pipefail

    if [[ -z "{{ service }}" ]]; then
        if [[ "{{ follow }}" == "follow" || "{{ follow }}" == "f" ]]; then
            journalctl --user -u arr-stack-pod.service -f
        else
            journalctl --user -u arr-stack-pod.service -n 50
        fi
    else
        SERVICE="{{ service }}"
        if [[ "$SERVICE" != "sonarr" && "$SERVICE" != "radarr" && "$SERVICE" != "prowlarr" && "$SERVICE" != "qbittorrent" ]]; then
            echo "Error: Invalid service. Choose: sonarr, radarr, prowlarr, qbittorrent, or omit for pod logs"
            exit 1
        fi

        if [[ "{{ follow }}" == "follow" || "{{ follow }}" == "f" ]]; then
            podman logs -f "$SERVICE"
        else
            podman logs --tail 50 "$SERVICE"
        fi
    fi

configure-homepage sonarr_port radarr_port prowlarr_port qbit_port base_dir="/srv":
    #!/usr/bin/env bash
    set -Eeuo pipefail

    gum style --border rounded --padding "1 2" --border-foreground 212 "Add Arr Stack to Homepage"
    echo

    BASE_DIR="{{ base_dir }}"

    gum style --foreground 212 "Reading API keys from config files..."

    SONARR_CONFIG="$BASE_DIR/config/sonarr/config.xml"
    RADARR_CONFIG="$BASE_DIR/config/radarr/config.xml"
    PROWLARR_CONFIG="$BASE_DIR/config/prowlarr/config.xml"

    if [ ! -f "$SONARR_CONFIG" ]; then
        gum style --foreground 196 "Error: Sonarr config not found at $SONARR_CONFIG"
    fi

    if [ ! -f "$RADARR_CONFIG" ]; then
        gum style --foreground 196 "Error: Radarr config not found at $RADARR_CONFIG"
    fi

    if [ ! -f "$PROWLARR_CONFIG" ]; then
        gum style --foreground 196 "Error: Prowlarr config not found at $PROWLARR_CONFIG"
    fi

    SONARR_API=$(yq -p xml -o yaml '.Config.ApiKey' "$SONARR_CONFIG")
    RADARR_API=$(yq -p xml -o yaml '.Config.ApiKey' "$RADARR_CONFIG")
    PROWLARR_API=$(yq -p xml -o yaml '.Config.ApiKey' "$PROWLARR_CONFIG")

    if [ -z "$SONARR_API" ] || [ "$SONARR_API" == "null" ]; then
        SONARR_API=$(gum input --password --placeholder "Sonarr API Key" --prompt "Enter Sonarr API key: ")
    fi

    if [ -z "$RADARR_API" ] || [ "$RADARR_API" == "null" ]; then
        RADARR_API=$(gum input --password --placeholder "Radarr API Key" --prompt "Enter Radarr API key: ")
    fi

    if [ -z "$PROWLARR_API" ] || [ "$PROWLARR_API" == "null" ]; then
        PROWLARR_API=$(gum input --password --placeholder "Prowlarr API Key" --prompt "Enter Prowlarr API key: ")
    fi

    gum style --foreground 212 "✓ API keys read successfully"
    echo "Sonarr API: ${SONARR_API:0:8}..."
    echo "Radarr API: ${RADARR_API:0:8}..."
    echo "Prowlarr API: ${PROWLARR_API:0:8}..."
    echo

    QBIT_USER=$(gum input --placeholder "admin" --prompt "qBittorrent username: " --value "admin")
    echo "qBittorrent username: $QBIT_USER"

    QBIT_PASS=$(gum input --password --placeholder "Password" --prompt "qBittorrent password: ")
    echo "qBittorrent password: ***"
    echo

    tempdir=$(mktemp -d)

    sed \
        -e "s|__SONARR_PORT__|{{ sonarr_port }}|g" \
        -e "s|__SONARR_API__|$SONARR_API|g" \
        -e "s|__RADARR_PORT__|{{ radarr_port }}|g" \
        -e "s|__RADARR_API__|$RADARR_API|g" \
        -e "s|__PROWLARR_PORT__|{{ prowlarr_port }}|g" \
        -e "s|__PROWLARR_API__|$PROWLARR_API|g" \
        -e "s|__QBIT_PORT__|{{ qbit_port }}|g" \
        -e "s|__QBIT_USER__|$QBIT_USER|g" \
        -e "s|__QBIT_PASS__|$QBIT_PASS|g" \
        /usr/share/hoth-os/apps/arr-stack/homepage_config.sh \
        > $tempdir/homepage_config.sh

    just --justfile /usr/share/hoth-os/apps/homepage/justfile add-service $tempdir/homepage_config.sh
