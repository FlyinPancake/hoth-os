set shell := ["bash", "-Eeuo", "pipefail", "-c"]

install:
    #!/usr/bin/env bash
    set -Eeuo pipefail

    gum style --border rounded --padding "1 2" --border-foreground 212 "Arr Stack Setup Wizard"
    echo

    DATA_PATH=$(gum input --placeholder "/srv" --prompt "Base path: " --value "/srv")
    echo "Base path: $DATA_PATH"

    SONARR_PORT=$(gum input --placeholder "8989" --prompt "Sonarr port: " --value "8989")
    echo "Sonarr port: $SONARR_PORT"

    RADARR_PORT=$(gum input --placeholder "7878" --prompt "Radarr port: " --value "7878")
    echo "Radarr port: $RADARR_PORT"

    PROWLARR_PORT=$(gum input --placeholder "9696" --prompt "Prowlarr port: " --value "9696")
    echo "Prowlarr port: $PROWLARR_PORT"

    QBIT_PORT=$(gum input --placeholder "8080" --prompt "qBittorrent port: " --value "8080")
    echo "qBittorrent port: $QBIT_PORT"

    TORRENT_PORT=$(gum input --placeholder "6881" --prompt "Torrent port: " --value "6881")
    echo "Torrent port: $TORRENT_PORT"
    echo

    gum confirm "Install Arr Stack with these settings?" || exit 0
    echo

    echo "Creating directories..."
    sudo mkdir -p "$DATA_PATH/config"/{sonarr,radarr,prowlarr,qbittorrent}
    sudo mkdir -p "$DATA_PATH/data"/{downloads,tv,movies}
    sudo chown -R $(id -u):$(id -g) "$DATA_PATH/config" "$DATA_PATH/data"

    QUADLET_DIR="$HOME/.config/containers/systemd"
    mkdir -p "$QUADLET_DIR"

    echo "Installing pod quadlet..."
    sed \
        -e "s|PublishPort=8989:8989|PublishPort=$SONARR_PORT:8989|" \
        -e "s|PublishPort=7878:7878|PublishPort=$RADARR_PORT:7878|" \
        -e "s|PublishPort=9696:9696|PublishPort=$PROWLARR_PORT:9696|" \
        -e "s|PublishPort=8080:8080|PublishPort=$QBIT_PORT:8080|" \
        -e "s|PublishPort=6881:6881|PublishPort=$TORRENT_PORT:6881|g" \
        /usr/share/hoth-os/quadlets/arr-stack.pod \
        > "$QUADLET_DIR/arr-stack.pod"

    echo "Installing Sonarr quadlet..."
    sed \
        -e "s|Volume=/srv/config|Volume=$DATA_PATH/config|g" \
        -e "s|Volume=/srv/data|Volume=$DATA_PATH/data|g" \
        -e "s|PUID=1000|PUID=$(id -u)|" \
        -e "s|PGID=1000|PGID=$(id -g)|" \
        /usr/share/hoth-os/quadlets/sonarr.container \
        > "$QUADLET_DIR/sonarr.container"

    echo "Installing Radarr quadlet..."
    sed \
        -e "s|Volume=/srv/config|Volume=$DATA_PATH/config|g" \
        -e "s|Volume=/srv/data|Volume=$DATA_PATH/data|g" \
        -e "s|PUID=1000|PUID=$(id -u)|" \
        -e "s|PGID=1000|PGID=$(id -g)|" \
        /usr/share/hoth-os/quadlets/radarr.container \
        > "$QUADLET_DIR/radarr.container"

    echo "Installing Prowlarr quadlet..."
    sed \
        -e "s|Volume=/srv/config|Volume=$DATA_PATH/config|g" \
        -e "s|Volume=/srv/data|Volume=$DATA_PATH/data|g" \
        -e "s|PUID=1000|PUID=$(id -u)|" \
        -e "s|PGID=1000|PGID=$(id -g)|" \
        /usr/share/hoth-os/quadlets/prowlarr.container \
        > "$QUADLET_DIR/prowlarr.container"

    echo "Installing qBittorrent quadlet..."
    sed \
        -e "s|Volume=/srv/config|Volume=$DATA_PATH/config|g" \
        -e "s|Volume=/srv/data|Volume=$DATA_PATH/data|g" \
        -e "s|PUID=1000|PUID=$(id -u)|" \
        -e "s|PGID=1000|PGID=$(id -g)|" \
        /usr/share/hoth-os/quadlets/qbittorrent.container \
        > "$QUADLET_DIR/qbittorrent.container"

    loginctl enable-linger $(whoami)

    echo "Starting services..."
    systemctl --user daemon-reload
    systemctl --user start arr-stack-pod.service
    echo

    gum style --foreground 212 "✓ Arr Stack installed successfully!"
    gum style --faint "Sonarr: http://localhost:$SONARR_PORT"
    gum style --faint "Radarr: http://localhost:$RADARR_PORT"
    gum style --faint "Prowlarr: http://localhost:$PROWLARR_PORT"
    gum style --faint "qBittorrent: http://localhost:$QBIT_PORT"
    gum style --faint "Data: $DATA_PATH"
    echo

    gum style --foreground 212 "⏱️ Waiting until services are ready..."
    while ! curl -s "http://localhost:$SONARR_PORT" >/dev/null; do sleep 2; done
    while ! curl -s "http://localhost:$RADARR_PORT" >/dev/null; do sleep 2; done
    while ! curl -s "http://localhost:$PROWLARR_PORT" >/dev/null; do sleep 2; done
    while ! curl -s "http://localhost:$QBIT_PORT" >/dev/null; do sleep 2; done
    gum style --foreground 212 "✓ All services are up!"

    if gum confirm "Add to Homepage?"; then
        just /usr/share/hoth-os/apps/arr-stack/justfile configure-homepage "$SONARR_PORT" "$RADARR_PORT" "$PROWLARR_PORT" "$QBIT_PORT" "$DATA_PATH"
    fi

uninstall:
    #!/usr/bin/env bash
    set -Eeuo pipefail

    gum confirm --default=false "Uninstall Arr Stack? (data will be preserved)" || exit 0

    gum spin --spinner dot --title "Stopping services..." -- systemctl --user disable --now arr-stack-pod.service 2>/dev/null || true
    rm -f "$HOME/.config/containers/systemd/arr-stack.pod"
    rm -f "$HOME/.config/containers/systemd/sonarr.container"
    rm -f "$HOME/.config/containers/systemd/radarr.container"
    rm -f "$HOME/.config/containers/systemd/prowlarr.container"
    rm -f "$HOME/.config/containers/systemd/qbittorrent.container"
    systemctl --user daemon-reload

    gum style --foreground 212 "✓ Arr Stack uninstalled"

status:
    @systemctl --user status arr-stack-pod.service

logs service="" follow="":
    #!/usr/bin/env bash
    set -Eeuo pipefail

    if [[ -z "{{ service }}" ]]; then
        if [[ "{{ follow }}" == "follow" || "{{ follow }}" == "f" ]]; then
            journalctl --user -u arr-stack-pod.service -f
        else
            journalctl --user -u arr-stack-pod.service -n 50
        fi
    else
        SERVICE="{{ service }}"
        if [[ "$SERVICE" != "sonarr" && "$SERVICE" != "radarr" && "$SERVICE" != "prowlarr" && "$SERVICE" != "qbittorrent" ]]; then
            echo "Error: Invalid service. Choose: sonarr, radarr, prowlarr, qbittorrent, or omit for pod logs"
            exit 1
        fi

        if [[ "{{ follow }}" == "follow" || "{{ follow }}" == "f" ]]; then
            podman logs -f "$SERVICE"
        else
            podman logs --tail 50 "$SERVICE"
        fi
    fi

configure-homepage sonarr_port radarr_port prowlarr_port qbit_port base_dir="/srv":
    #!/usr/bin/env bash
    set -Eeuo pipefail

    gum style --border rounded --padding "1 2" --border-foreground 212 "Add Arr Stack to Homepage"
    echo

    BASE_DIR="{{ base_dir }}"

    gum style --foreground 212 "Reading API keys from config files..."

    SONARR_CONFIG="$BASE_DIR/config/sonarr/config.xml"
    RADARR_CONFIG="$BASE_DIR/config/radarr/config.xml"
    PROWLARR_CONFIG="$BASE_DIR/config/prowlarr/config.xml"

    if [ ! -f "$SONARR_CONFIG" ]; then
        gum style --foreground 196 "Error: Sonarr config not found at $SONARR_CONFIG"
    fi

    if [ ! -f "$RADARR_CONFIG" ]; then
        gum style --foreground 196 "Error: Radarr config not found at $RADARR_CONFIG"
    fi

    if [ ! -f "$PROWLARR_CONFIG" ]; then
        gum style --foreground 196 "Error: Prowlarr config not found at $PROWLARR_CONFIG"
    fi

    SONARR_API=$(yq -p xml -o yaml '.Config.ApiKey' "$SONARR_CONFIG")
    RADARR_API=$(yq -p xml -o yaml '.Config.ApiKey' "$RADARR_CONFIG")
    PROWLARR_API=$(yq -p xml -o yaml '.Config.ApiKey' "$PROWLARR_CONFIG")

    if [ -z "$SONARR_API" ] || [ "$SONARR_API" == "null" ]; then
        SONARR_API=$(gum input --password --placeholder "Sonarr API Key" --prompt "Enter Sonarr API key: ")
    fi

    if [ -z "$RADARR_API" ] || [ "$RADARR_API" == "null" ]; then
        RADARR_API=$(gum input --password --placeholder "Radarr API Key" --prompt "Enter Radarr API key: ")
    fi

    if [ -z "$PROWLARR_API" ] || [ "$PROWLARR_API" == "null" ]; then
        PROWLARR_API=$(gum input --password --placeholder "Prowlarr API Key" --prompt "Enter Prowlarr API key: ")
    fi

    gum style --foreground 212 "✓ API keys read successfully"
    echo "Sonarr API: ${SONARR_API:0:8}..."
    echo "Radarr API: ${RADARR_API:0:8}..."
    echo "Prowlarr API: ${PROWLARR_API:0:8}..."
    echo

    QBIT_USER=$(gum input --placeholder "admin" --prompt "qBittorrent username: " --value "admin")
    echo "qBittorrent username: $QBIT_USER"

    QBIT_PASS=$(gum input --password --placeholder "Password" --prompt "qBittorrent password: ")
    echo "qBittorrent password: ***"
    echo

    tempdir=$(mktemp -d)

    sed \
        -e "s|__SONARR_PORT__|{{ sonarr_port }}|g" \
        -e "s|__SONARR_API__|$SONARR_API|g" \
        -e "s|__RADARR_PORT__|{{ radarr_port }}|g" \
        -e "s|__RADARR_API__|$RADARR_API|g" \
        -e "s|__PROWLARR_PORT__|{{ prowlarr_port }}|g" \
        -e "s|__PROWLARR_API__|$PROWLARR_API|g" \
        -e "s|__QBIT_PORT__|{{ qbit_port }}|g" \
        -e "s|__QBIT_USER__|$QBIT_USER|g" \
        -e "s|__QBIT_PASS__|$QBIT_PASS|g" \
        /usr/share/hoth-os/apps/arr-stack/homepage_config.sh \
        > $tempdir/homepage_config.sh

    just --justfile /usr/share/hoth-os/apps/homepage/justfile add-service $tempdir/homepage_config.sh
